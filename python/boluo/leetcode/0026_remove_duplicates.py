"""
给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

 
示例 1：
输入：nums = [1,1,2]
输出：2, nums = [1,2]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。

示例 2：
输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
"""


class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        
        i, j = 0, 1
        while j < len(nums):

            # 比较i, j位置上的元素是否相同, 如果相同: j++
            if nums[i] == nums[j]:
                j = j + 1

            # 比较i, j位置上的元素是否相同, 如果不相同则将j上的元素移到i+1的位置上, i++
            else:
                nums[i + 1] = nums[j]
                i = i + 1

        return i + 1
